extern crate quick_xml;
use std::sync::mpsc::{Sender, Receiver};
use std::sync::mpsc;
use std::thread;
use quick_xml::events::Event;
use quick_xml::{Reader, Writer};
use std::fs::File;

fn main() {


    //let mut txt = Vec::new();
    let now = std::time::Instant::now();
    let (tx, rx): (Sender<Event>, Receiver<Event>) = mpsc::channel();

    let sender = tx.clone();
    let child = thread::spawn(move || {
        let mut reader = Reader::from_file("0.xml").unwrap();
        reader.trim_text(true);

        let mut in_offer = false;
        let mut buf = Vec::with_capacity(1024);
        let mut attempts = 0;
        loop {
            let event = reader.read_event(&mut buf);
            match event {
                Ok(event) => {
                    match event {
                        Event::Start(ref e) if e.name() == b"offer" => {
                            in_offer = true;
                            sender.send(event.into_owned()).unwrap();
                        }

                        Event::End(ref e) if e.name() == b"offer" => {
                            in_offer = false;
                            tx.send(event.into_owned()).unwrap();
                            attempts += 1;
                            if attempts > 10000 {
                                break;
                            }
                        }

                        Event::Empty(_) => {
                            if in_offer {
                                tx.send(event.into_owned()).unwrap();
                            }
                        }

                        Event::Text(_) | Event::CData(_) => {
                            if in_offer {
                                tx.send(event.into_owned()).unwrap();
                            }
                        }

                        Event::Start(ref e) if e.name() != b"offer" => {
                            if in_offer {
                                tx.send(event.into_owned()).unwrap();
                            }
                        }

                        Event::End(ref e) if e.name() != b"offer" => {
                            if in_offer {
                                tx.send(event.into_owned()).unwrap();
                            }
                        }

                        Event::Eof => break, // exits the loop when reaching end of file

                        _ => (), // There are several other `Event`s we do not consider here
                    }
                }

                Err(e) => panic!("Error at position {}: {:?}", reader.buffer_position(), e),
            }
        }
    });

    let write = File::create("foo.xml").unwrap();
    let mut writer = Writer::new_with_indent(write, b' ', 2);
    loop {
        if let Ok(event) = rx.recv() {
            writer.write_event(event).unwrap();
        } else {
            break;
        }
    }

    child.join().unwrap();
    let elapsed = now.elapsed().as_nanos();
    println!("Elapsed {} ns", elapsed);
}
